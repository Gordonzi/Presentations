h1. Lecture 5: Scaling Data, Part II

Today and next week we'll discuss some NoSQL databases in depth.

h1. MongoDB and CouchDB

* MongoDB: "mongodb.org":http://mongodb.org
* CouchDB: "couchdb.apache.org":http://couchdb.apache.org

Both are document oriented, use JSON, are schemaless, and support JavaScript for programming many database operations. But they are very different in other ways, a reflection of their different goals.

h1. CouchDB Architecture

Internal architecture.

<p><img src="images/CouchDB-architecture-sketch.png"><img>

(source: "couchdb.apache.org":http://couchdb.apache.org/)

h1. MongoDB Architecture

Simpler internal architecture. Lots of small services, as shown here:

<p><img src="images/mongodb_sharding_replica_sets.png"><img>

(source: "mongodb.org":http://mongodb.org/)

h1. Differences Between MongoDB and CouchDB

* Persistence Strategy
* Scalability
* Queries
* MapReduce
* Transactions
* "Driver" APIs
* Ideal Applications

(Some of these points adapted from "Comparing Mongo DB and Couch DB":http://www.mongodb.org/display/DOCS/Comparing+Mongo+DB+and+Couch+DB)

h1. Persistence Strategy

_CouchDB uses *MVCC*, while MongoDB uses *update in place*._

Recall that MVCC is _multiversion concurrency control_. We discussed it when talking about _software transactional memory_ (STM). In MVCC a new version of the document is created with the desired changes. The previous versions are still available, until they are specifically deleted (or _compacted_ into fewer versions).

Update in place just means that we insert changes directly into the existing document's record, so previous values are overwritten.

h1. Advantages of MVCC

Better for *durability*. _Append-only log files_ are a database industry standard for durable transactions. CouchDB uses an append-only BTree on disk, so updates are durable (if the files survive...). If CouchDB crashes, you just restart and go. (BTrees are N-ary sorted trees that are optimal for relatively slow read operations, like disk and file access.)

If conflicting updates happen, _both_ of them are saved.

MVCC is very good for syncing master-master database configurations. For example, you can create a copy of the database, take it offline and work on it, then sync it to the other copies when back online again. CouchDB has bi-directional replication.

*Note:* distributed version control systems like _git_ work the same way.
 
h1. Disadvantages of MVCC

Making copies of documents is slower, consumes more space over time. Compaction is required occasionally. 

Update conflicts must be resolved manually (although now update is "lost" and CouchDB deterministically picks a default "winner").

h1. Advantages of Update in Place

Faster write performance, especially for updates. Since the document isn't copied, updates are faster. However, this statement ignores disk seek time for finding those records. An append-only file on a disk with no other read/write operations will have minimal seek time, thereby boosting performance. (This is  a case where real-world performance will have to be determined by measurement.)

Compaction isn't needed to remove unneeded copies of documents, since multiple versions aren't created.

Better for Master-Slave configurations with failover.

h1. Disadvantages of Update in Place

If conflicting updates occur, only the last one survives. Transactions are more important to avoid collisions with out the recovery option that MVCC provides (e.g., picking a previous version or merging results some how).

If MongoDB crashes, you will probably need to repair the database, prolonging the recovery and restoration of normal service. This is one reason why MongoDB recommends replicated database instances, so service is not interrupted. However, once the crashed instances are running again, you'll need to resync them, to get the most recent transactions pushed to the newly-recovered instance.

h1. Disadvantages of Update in Place (cont.)

_CouchDB is much more durable for single database instances, but most production systems should have replication anyway._

h1. Other Notes on Durability

To maximize write performance, MongoDB uses memory-mapped files that are persisted to disk every 60 seconds, by default (using _fsync_). This also means that concurrent reads can see stale data, even after an API call for writing returns. Synchronous disk writes are possible, but they impede performance.

CouchDB can also do "delayed commits", i.e., write operations return immediately, but the actual fsync occurs every second, by default. However, they recommend not doing delayed commits, trading some some performance for better durability.

(see also "MongoDB Performance and Durability":http://www.mikealrogers.com/2010/07/mongodb-performance-durability/)

h1. Other Notes on Durability (cont.)

*Note:* High end servers often have battery-backed RAID controllers, where the fsync appears to complete faster, but the RAID delays commits (often using sophisticated algorithms to sequence reads and writes in order to minimize disk head seeks). You get the best of both worlds, fast fsync plus durability ensured by battery backup.

*Moral:* You have to understand your full system and measure what you want to optimize.

h1. Scalability

CouchDB uses replication to scale, where different instances can work on different parts of the data. However, that approach is limited when the database becomes huge. There are some third party sharding/partitioning approaches, the leader of which is "BigCouch":http://github.com/cloudant/bigcouch, which provides transparent clustering, fault-tolerance, and high availability. (Cloudant provides professional services for CouchDB installations.)

MongoDB uses replication for durability and availability and sharding for scalability. (Discussed in last week's reading assignment.)
 
h1. Durability, Replication, and Consistency

When replicating CouchDB instances, you get _eventual consistency_. Note that if one replica is offline, consistency can't happen until it comes online again.

Some NoSQL systems, like Cassandra, let you define that a write operation is complete when M of N replicas have received the write.

h1. Queries

MongoDB provides a full-featured, _ad hoc_ query capability using JavaScript as the query language. You can do almost any kind of query that you can do with SQL in a SQL database. For some cases, the built-in MapReduce framework has to be used. (We'll cover that in a few weeks.)

CouchDB does not provide an _ad hoc_ query mechanism. Instead, it emphasizes creating views onto the data. You design your database with specific indexing and MapReduce operations that execute incremental when updates are made. These views efficiently expose the data you want, formatted the way you want it.

h1. MapReduce

Both systems support _MapReduce_. CouchDB requires writing MapReduce functions to construct the views. MongoDB provides MapReduce for optimizing some computations, but the query language doesn't require MapReduce functions.

h1. Transactions

Neither database supports the full transaction capabilities typically found in RDBMSs. They do this to keep the systems lighter and faster.

Instead, MongoDB offers several "atomic operations":http://www.mongodb.org/display/DOCS/Atomic+Operations for _single_ documents (i.e., rows, in RDBMS terminology). 

Similarly, CouchDB also supports document-level transactions through MVCC, providing optimistic updates, but records when a collision occurs, recording _both_ updates, and using a deterministic algorithm to pick the "winner". Normally, though, the application should decide how to resolve the collision.

h1. "Driver" APIs: CouchDB

While there are language drivers for CouchDB, the primary way to interact with a CouchDB database is through a REST API. This is particularly useful for building two-tier applications, with a web (presentation) tier that communicates with the persistence tier over REST. All business logic is implemented as part of the database view design described above.

This model is very convenient for smaller applications. Larger applications typically use 3 or more tiers.
 
h1. "Driver" APIs: MongoDB

For performance reasons, MongoDB is accessed primarily through language drivers for C++, Java, Ruby, etc. These drivers talk a proprietary binary protocol. There is also a limited REST API available. The driver approach is more traditional for n-tier applications, but it is less convenient for applications where web pages want to access a MongoDB database directly (over HTTP).

h1. Ideal Applications

So, while superficially similar, they are very different in important ways, which affects the kinds of applications for which each is ideal.

h1. Ideal Applications: CouchDB

CouchDB is ideal for:

* Productivity applications with built in databases, where offline work is common, with subsequent synching to the "master". Think email, calendaring, "TODO" and similar apps.
* Persistence with easy replication is more important that update throughput.
* Easy integration with web front ends, through REST.
* Many apps that Ruby on Rails is currently used to implement.

h1. Ideal Applications: MongoDB

MongoDB is ideal for:

* Applications with high-volume writes/updates, especially if some write losses are tolerable (e.g., sensor networks).
* System "logs" (especially with "capped collections":http://www.mongodb.org/display/DOCS/Capped+Collections).
* Applications requiring ad hoc query support.
* Applications requiring fast language-specific drivers.

h1. Conclusions: MongoDB vs. CouchDB

MongoDB is philosophically more like a traditional RDBMS, and you use it in much the same way. 

CouchDB is more like an application platform for two-tier applications that require persistence, with solid, easy replication. 

_JavaScript from the database to the browser is becoming a compelling application development approach._

h1. Key-Value Stores

E.g., _Amazon SimpleDB, Riak, Redis, Tokyo Cabinet, Scalaris, MemcacheDB, BerkeleyDB, Mnesia._
 
Think of hash maps on _steroids_.
* May be purely in-memory (with optional flushing to disk) and resident on one machine.
* Excellent for "persisting" semi-structured data with shorter lifespans (e.g., web sessions).
* Used when durability and consistency are lower priorities compared to speed.

h1. Eventually Consistent Key-Value Stores

E.g., _Amazon Dynamo, Dynomite, Voldemort_

More emphasis on longer-lived objects that need to be persisted, but for which rapid retrieval is still important.
* Transparent replication of data.
* Transparent clustering of nodes.
* Great for fault tolerance, especially for "active sessions".

Your homework reading will include a paper on Dynamo.

h1. Are Key-Value Stores Really Databases?

"Memcached":http://memcached.org/ has been around a while. It's a popular in-memory, distributed cache. It's great for caching database queries in memory, for faster repeat retrieval, storing user sessions between page views in a web application, etc.

The definition of "database" has expanded in recent years, so now we think of a key-value store, like memcached, as a datastore, _if_ it is backed by some sort of durability.

"MemcacheDB":http://memcachedb.org/ is built on top of Memcached to provide this durability. It uses another, fairly old, open-source NoSQL store, "BerkeleyDB":http://www.oracle.com/technetwork/database/berkeleydb/index.html to provide persistence.

h1. MemcacheDB

It's API is compliant with the Memcache protocol:

* get(also multiple get)
* set, add, replace
* append/prepend
* incr, decr
* delete
* stats

Very simple! If all you need is key-based storage and retrieval of "blobs", then a key-value store like this can be ideal.

h1. Redis

"Redis":http://code.google.com/p/redis/ provides data-structure aware storage. Not just key-values (e.g., a map or hash), where values are "blobs", but also API calls specifically for working with strings, lists, sets, and sorted sets. 

h1. Redis

Other features:

* Many language bindings.
* Very high speed.
* Integrated into Akka (for durable persistent data structures).
* Limited support for fault tolerance and clustering.

So, useful for the same sorts of tasks MemcacheDB would be used for, plus cases where awareness of the additional data structures is useful.

h1. Key-Value Store: General Considerations

* How often is data synced to disk?
* How is data replicated to other nodes (for distributed stores)?
* How is fault tolerance supported?


h1. Reading Assignment: CouchDB

Read "Chapter 1":http://guide.couchdb.org/editions/1/en/why.html of _CouchDB, The Definitive Guide_, which describes the philosophy behind CouchDB, the kinds of applications it is suitable for, etc.

h1. Reading Assignment: MongoDB

Read the MongoDB pages on "queries":http://www.mongodb.org/display/DOCS/Querying and "advanced queries":http://www.mongodb.org/display/DOCS/Advanced+Queries. We'll use them in today's exercise (discussed below).

h1. Reading Assignment: Amazon Dynamo

Giuseppe DeCandia, Deniz Hastorun, Madan Jampani, Gunavardhan Kakulapati, Avinash Lakshman, Alex Pilchin, Swaminathan Sivasubramanian, Peter Vosshall and Werner Vogels, "Dynamo: Amazon’s Highly Available Key-value Store":http://www.allthingsdistributed.com/2007/10/amazons_dynamo.html

h1. Reading Assignment: Cassandra

Avinash Lakshman and Prashant Malik, "Cassandra — A Decentralized Structured Storage System":http://www.cs.cornell.edu/projects/ladis2009/papers/lakshman-ladis2009.pdf

h1. Exercise: Mongo Queries

This week, since I've given you longer reading assignments, I'll give you a shorter exercise ;) We'll use the mongo console to query the stock data. We'll return to the web application next week, when we'll incorporate some of this work in the application.

Start @mongodb@ and @mongo@ in separate command windows, as you've done before. On the next page is an example @mongo@ session. They show the @>@ mongo prompt and the resulting output on my database instance. (Some of your results may be slightly different.)

h1. Exercise: Mongo Queries (cont.)

Getting general help and help on database-level commands.

:inlinecode lang=plain, class=code-small
> help()
	  db.help()                    help on db methods
	  db.mycoll.help()             help on collection methods
	  rs.help()                    help on replica set methods
		...
> db.help()
DB methods:
	  db.addUser(username, password[, readOnly=false])
	  db.auth(username, password)
	  db.cloneDatabase(fromhost)
	  db.commandHelp(name) returns the help for the command
	  db.copyDatabase(fromdb, todb, fromhost)
	  db.createCollection(name, { size : ..., capped : ..., max : ... } )
		...
:endinlinecode 
		
h1. Exercise: Mongo Queries (cont.)

Getting collection-level commands.

:inlinecode lang=plain, class=code-small
> db.foo.help()
DBCollection help
	  db.foo.find().help() - show DBCursor help
	  db.foo.count()
	  db.foo.dataSize()
	  db.foo.distinct( key ) - eg. db.foo.distinct( 'x' )
	  db.foo.drop() drop the collection
	  db.foo.dropIndex(name)
	  ...
:endinlinecode 

*Note:* @foo@ is just a placeholder. You can use any real collection name instead.

h1. Exercise: Mongo Queries (cont.)

:inlinecode lang=plain, class=code-small
> show dbs
admin
local
stocks_yahoo_NYSE
> use stocks_yahoo_NYSE
switched to db stocks_yahoo_NYSE
> show collections
A_dividends
A_prices
B_dividends
B_prices
C_dividends
C_prices
...
:endinlinecode 

h1. Exercise: Mongo Queries (cont.)

How many documents in a collection? Show me one item:

:inlinecode lang=plain, class=code-small
> db.A_dividends.count()
8322
> db.A_prices.count()
693733
> db.A_dividends.findOne()
{
    "_id" : ObjectId("4c9f75bbf0c81d093e48b0cc"),
    "date" : "2007-09-26",
    "dividends" : 0.04,
    "stock_symbol" : "ATU",
    "exchange" : "NYSE"
}
...
:endinlinecode 

h1. Exercise: Mongo Queries (cont.)

:inlinecode lang=plain, class=code-small
> db.A_prices.findOne()
{
    "_id" : ObjectId("4c9f7586f0c81d093e3e1ae7"),
    "close" : 27.13,
    "high" : 27.4,
    "date" : "2008-03-07",
    "stock_symbol" : "ATU",
    "exchange" : "NYSE",
    "volume" : 591000,
    "adj close" : 27.13,
    "low" : 26.18,
    "open" : 26.18
}
...
:endinlinecode 

h1. Exercise: Mongo Queries (cont.)

Find all unique values for a particular field in the collection.

:inlinecode lang=plain, class=code-small
> db.A_prices.distinct("stock_symbol")          
[
    "AA",
    "AAI",
    "AAP",
    "AAR",
    "AAV",
    "AB",
    "ABA",
    "ABB",
    "ABC",
...
:endinlinecode 

h1. Exercise: Mongo Queries (cont.)

Find all documents matching a specific field value, limited to 5 items.

:inlinecode lang=plain, class=code-tiny
> db.A_prices.find({stock_symbol: "AA"}).limit(5)
{ "_id" : ObjectId("4c9f75a2f0c81d093e445ce3"), "close" : 36.6, "high" : 37.9, "date" : "2008-03-07", "stock_symbol" : "AA", "exchange" : "NYSE", "volume" : 17752400, "adj close" : 36.6, "low" : 36.13, "open" : 37.01 }
{ "_id" : ObjectId("4c9f75a2f0c81d093e445ce4"), "close" : 38.37, "high" : 39.28, "date" : "2008-03-06", "stock_symbol" : "AA", "exchange" : "NYSE", "volume" : 11279900, "adj close" : 38.37, "low" : 38.26, "open" : 38.85 }
{ "_id" : ObjectId("4c9f75a2f0c81d093e445ce5"), "close" : 38.71, "high" : 39.15, "date" : "2008-03-05", "stock_symbol" : "AA", "exchange" : "NYSE", "volume" : 11754600, "adj close" : 38.71, "low" : 38.1, "open" : 38.25 }
{ "_id" : ObjectId("4c9f75a2f0c81d093e445ce6"), "close" : 38, "high" : 38.94, "date" : "2008-03-04", "stock_symbol" : "AA", "exchange" : "NYSE", "volume" : 15715600, "adj close" : 38, "low" : 37.1, "open" : 37.9 }
{ "_id" : ObjectId("4c9f75a2f0c81d093e445ce7"), "close" : 38.32, "high" : 38.46, "date" : "2008-03-03", "stock_symbol" : "AA", "exchange" : "NYSE", "volume" : 13964700, "adj close" : 38.32, "low" : 37.13, "open" : 37.17 }
...
:endinlinecode 

h1. Exercise: Mongo Queries (cont.)

Find all documents matching a specific field value, sorted by date (both ways), limited to 3 items.

:inlinecode lang=plain, class=code-tiny
> db.A_prices.find({stock_symbol: "AA"}).sort({date: 1}).limit(3)
{ "_id" : ObjectId("4c9f75a3f0c81d093e448a4b"), "close" : 65.37, "high" : 65.75, "date" : "1962-01-02", "stock_symbol" : "AA", "exchange" : "NYSE", "volume" : 134400, "adj close" : 0.74, "low" : 65.37, "open" : 65.37 }
{ "_id" : ObjectId("4c9f75a3f0c81d093e448a4a"), "close" : 66.37, "high" : 66.37, "date" : "1962-01-03", "stock_symbol" : "AA", "exchange" : "NYSE", "volume" : 179200, "adj close" : 0.75, "low" : 65.25, "open" : 65.37 }
{ "_id" : ObjectId("4c9f75a3f0c81d093e448a49"), "close" : 66.37, "high" : 66.87, "date" : "1962-01-04", "stock_symbol" : "AA", "exchange" : "NYSE", "volume" : 193600, "adj close" : 0.75, "low" : 66.37, "open" : 66.37 }
> db.A_prices.find({stock_symbol: "AA"}).sort({date: 1}).limit(3)
{ "_id" : ObjectId("4c9f75a2f0c81d093e445ce3"), "close" : 36.6, "high" : 37.9, "date" : "2008-03-07", "stock_symbol" : "AA", "exchange" : "NYSE", "volume" : 17752400, "adj close" : 36.6, "low" : 36.13, "open" : 37.01 }
{ "_id" : ObjectId("4c9f75a2f0c81d093e445ce4"), "close" : 38.37, "high" : 39.28, "date" : "2008-03-06", "stock_symbol" : "AA", "exchange" : "NYSE", "volume" : 11279900, "adj close" : 38.37, "low" : 38.26, "open" : 38.85 }
{ "_id" : ObjectId("4c9f75a2f0c81d093e445ce5"), "close" : 38.71, "high" : 39.15, "date" : "2008-03-05", "stock_symbol" : "AA", "exchange" : "NYSE", "volume" : 11754600, "adj close" : 38.71, "low" : 38.1, "open" : 38.25 }
...
:endinlinecode 

h1. Exercise: Mongo Queries (cont.)

Find the historical high and low closing values for AA.

:inlinecode lang=plain, class=code-tiny
> db.A_prices.find({stock_symbol: "AA"}).sort({close: 1}).limit(1)
{ "_id" : ObjectId("4c9f75a2f0c81d093e446234"), "close" : 18.03, "high" : 18.4, "date" : "2002-10-09", "stock_symbol" : "AA", "exchange" : "NYSE", "volume" : 4345100, "adj close" : 16.04, "low" : 17.81, "open" : 18 }
> db.A_prices.find({stock_symbol: "AA"}).sort({close: -1}).limit(1)
{ "_id" : ObjectId("4c9f75a3f0c81d093e44860f"), "close" : 94.5, "high" : 94.5, "date" : "1966-04-21", "stock_symbol" : "AA", "exchange" : "NYSE", "volume" : 235200, "adj close" : 1.15, "low" : 92.75, "open" : 93.12 }
...
:endinlinecode 

h1. Exercise: Mongo Queries (cont.)

Using logical comparison operations. (There are others...)

:inlinecode lang=plain, class=code-tiny
> db.A_prices.find({close: { $lte: 25.0}}).limit(3)
{ "_id" : ObjectId("4c9f7586f0c81d093e3e2126"), "close" : 24.75, "high" : 25.57, "date" : "2001-10-25", "stock_symbol" : "ATU", "exchange" : "NYSE", "volume" : 116400, "adj close" : 6.16, "low" : 24.5, "open" : 25.55 }
{ "_id" : ObjectId("4c9f7586f0c81d093e3e212a"), "close" : 24.8, "high" : 25, "date" : "2001-10-19", "stock_symbol" : "ATU", "exchange" : "NYSE", "volume" : 101200, "adj close" : 6.17, "low" : 24.1, "open" : 24.4 }
{ "_id" : ObjectId("4c9f7586f0c81d093e3e212b"), "close" : 24.15, "high" : 24.99, "date" : "2001-10-18", "stock_symbol" : "ATU", "exchange" : "NYSE", "volume" : 36000, "adj close" : 6.01, "low" : 24.15, "open" : 24.8 }
> db.A_prices.find({close: { $gte: 25.0}}).limit(3)
{ "_id" : ObjectId("4c9f7586f0c81d093e3e1ae7"), "close" : 27.13, "high" : 27.4, "date" : "2008-03-07", "stock_symbol" : "ATU", "exchange" : "NYSE", "volume" : 591000, "adj close" : 27.13, "low" : 26.18, "open" : 26.18 }
{ "_id" : ObjectId("4c9f7586f0c81d093e3e1ae8"), "close" : 27.07, "high" : 27.72, "date" : "2008-03-06", "stock_symbol" : "ATU", "exchange" : "NYSE", "volume" : 679200, "adj close" : 27.07, "low" : 27, "open" : 27.35 }
{ "_id" : ObjectId("4c9f7586f0c81d093e3e1ae9"), "close" : 27.56, "high" : 27.89, "date" : "2008-03-05", "stock_symbol" : "ATU", "exchange" : "NYSE", "volume" : 478500, "adj close" : 27.56, "low" : 27.14, "open" : 27.48 }
...
:endinlinecode 

h1. Exercise: Mongo Queries (cont.)

Using JavaScript expressions in queries.

:inlinecode lang=plain, class=code-tiny
> db.B_prices.find("this.stock_symbol.length == 2").limit(1)
{ "_id" : ObjectId("4c9f75bcf0c81d093e48ed60"), "close" : 15.39, "high" : 15.92, "date" : "2008-03-07", "stock_symbol" : "BC", "exchange" : "NYSE", "volume" : 1542700, "adj close" : 15.39, "low" : 15.2, "open" : 15.61 }
...
:endinlinecode 

h1. Exercise: Mongo Queries (cont.)

Using regular expressions in queries. Limiting the fields returned.

:inlinecode lang=plain, class=code-tiny
> db.D_prices.find({stock_symbol: /D.*G$/}).limit(1)
{ "_id" : ObjectId("4c9f7611f0c81d093e5d78ed"), "close" : 12.68, "high" : 12.88, "date" : "2008-03-07", "stock_symbol" : "DHG", "exchange" : "NYSE", "volume" : 194900, "adj close" : 12.68, "low" : 12.55, "open" : 12.69 }
> db.D_prices.find({stock_symbol: /D.*G$/}, {stock_symbol:1, _id:0}).limit(1)
{ "stock_symbol" : "DHG" }
...
:endinlinecode 

h1. Exercise: Mongo Queries (cont.)

Finally, some more involved JavaScript.

:inlinecode lang=plain, class=code-tiny
> var ds = db.D_prices.distinct("stock_symbol") 
> for (i in ds) { var d = ds[i]; if (d.charAt(d.length-1) == "T") print(d); }
DCT
DDT
DFT
DHT
DKT
DST
DT
DTT
...
:endinlinecode 

h1. Exercise: Mongo Queries (cont.)

Now for the exercises: Email your answers to the following questions by the start of class next week. You can capture the output of your terminal session, if you want. Whatever you do, show me the answer for each question, as well as the query (or queries) you used to get it.

* What were the earliest and latest trading dates for the stock with the symbol @BAM@?
* What were the highest and lowest closing prices for @CSC@ and on what dates did they occur?
* Write a query that returns the first 100 trading days from the A table where the price closed above $100. Limit the fields returned to show just the data, the stock symbol, and the closing price (also suppress the id). Show the results of the query.

h1. Exercise: Mongo Queries (cont.)

* The "volume" is the number of shares traded that day. What "A" stock had the lowest number of shares traded in a day, _other than zero_, and what was the date (or dates).
* How many times did "AA" pay a dividend?
* How many times did "AA" pay a dividend in 2007? What were the dates when those dividends were paid?
* What stock symbols start with "C" and end with "M"?
