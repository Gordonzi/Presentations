h1. Lecture 9: Effective Object-Oriented Programming (OOP), Part II

h1. Why Are Objects Interesting?

Because managing complexity is one of our biggest challenges. Mentally, we object encapsulation in our daily lives to avoid being overwhelmed by sensory input. Object-Oriented Programming tries to apply that same strategy to managing software complexity.

However, like any tool, objects can be used in situations where their drawbacks outweigh their benefits.

h1. Some History

<div class='small'>

|_.Year |_.Event|_.Features|_.Notes|
| 1967 | Simula | Objects, classes, subclasses, virtual methods, coroutines, discrete event simulation, garbage collection. | First OO Language.|
| 1972 | Smalltalk | Object-oriented, dynamically typed, reflective. | First public version in 1980|

</div>

h1. Some History (cont.)

<div class='small'>

|_.Year |_.Event|_.Features|_.Notes|
| 1983 | C++ | Classes, virtual functions, operator overloading, multiple inheritance, templates. | Most widely used OO language in the 90s. (?) |
| 1986 | Eiffel | Design by contract, command-query separation, uniform-access principle, single-choice principle, open-closed principle, and option-operand separation | Very innovative. Still used in some industries, esp. in Europe.|

In 1984, Apple introduced the Macintosh, the first popular copmuter with a Graphical User Interface. GUIs were quickly seen as ideal for OOP.

</div>

h1. Some History (cont.)

<div class='small'>

|_.Year |_.Event|_.Features|_.Notes|
| 1995 | Java | "Simplified C++", plus byte code running on a virtual machine. | Rapid adoption with the Internet. |
| 1995 | JavaScript | Prototype-based, scripting, dynamically and weakly typed, first-class functions, closures, higher-order functions. | Also considered a functional programming language. Inspired by Scheme. |

</div>

h1. Some History (cont.)

<div class='small'>

|_.Year |_.Event|_.Features|_.Notes|
| 2003 | Scala | Object-oriented and functional programming. | Runs on the JVM and .NET CLR. |
| 2007 | Clojure | Lisp on the JVM. | Innovative approaches to mutable state. |

The rise of functional programming, with some languages taking a hybrid object-functional approach, like Scala, OCaml, and JavaScript, while other languages are discounting the value of objects, like Clojure.
</div>

h1. Eiffel Innovations

* *Design by Contract:* Discussed last lecture.
* *Command-Query Separation:*
* *Uniform-Access Principle:*
* *Single-Choice Principle:* (a.k.a. _Don't Repeat Yourself_)
* *Open-Closed Principle:* 
* *Option-Operand Separation:* (We won't discuss this one.)

h1. Command-Query Separation

To keep each "piece" of code as simple as possible, each object and function should _do only one "thing"_. This is the _Single Responsibility Principle_, the "S" in the SOLID principles.

h1. Command-Query Separation (cont.)

If a function executes a "command" and it returns a value ("query"), it's doing _two_ things. Hence, you should have separate command and query functions:

* *Command:* Do something, i.e., update state, but don't return values. (It might return a "success" indicator...)
* *Query:* Return a result, but don't alter state (at least not the visible state - it may update an internal _cache_, for example.)

Example: JavaBean getters and setters.

h1. CQ Separation: Counterexamples

*Builders:*

:inlinecode lang=scala, class=code-small
import org.chicagoscala.awse.domain.finance._
val criteria = CriteriaMap().
  withInstruments(instruments).
  withStatistics(statistics).
  withStart(start).
  withEnd(end)
:endinlinecode 

*Functional Operations:*

:inlinecode lang=scala, class=code-small
// Generate a sequence of strings: "2", "4"
(1 to 10) filter (_ % 2 == 0) map (_.toString) take 2
// ...immutable.IndexedSeq[java.lang.String] = Vector(2, 4)
:endinlinecode 


h1. Uniform-Access Principle

:inlinecode lang=scala, class=code-small
case class Person(name:String, age: Int)
...
val dean = Person("Dean Wampler")
println(dean.name)
:endinlinecode 

Am I calling a method @name@ or accessing a "bare" @name@ field??

h1. Uniform-Access Principle (cont.)

The _caller_ doesn't care whether a method is invoked or a bare field is accessed.
 
The _implementer_ might want to start with a simple bare field access, then eventually replace it with a method call (e.g., to do lazy initialization, etc.).

The _uniform-access principle_ means the caller's code doesn't have to change, because the syntax is identical. (The code might need a recompile).

h1. Uniform-Access Principle (cont.)

Note that the JavaBean convention for getters and setters does _not_ support this principle!

:inlinecode lang=java, class=code-small
class Person {
  private String name;
  public String getName() { return name; }
  
  public Person(String name) { this.name = name; }
}
...
val dean = Person("Dean Wampler")
println(dean.getName());
// very different from:
// println(dean.name);
:endinlinecode 

h1. Single-Choice Principle

This is now more commonly known as DRY, _Don't Repeat Yourself_. It means, don't write code that duplicates the work of other code.

* Leads to bloat.
* Each version must be maintained, kept in sync.
** It's very common for the versions to "grow" out of sync, leading to bugs.

h1. Good Object Design: Lesson 4

_Don't Repeat Yourself_ is more valuable than it might sound at first. Removing duplication pays dividends in terms of code quality, size, and maintainability over the life of a project.

h1. Open-Closed Principle

The "O" in the SOLID principles.

How can we add new behavior to the system without editing existing code? Philip Wadler called this the _Expression Problem_.

If we edit existing code, 
* we must retest, redeploy...
* we force clients of the code to modify their code and retest, redeploy...

h1. Open-Closed Principle (cont.)

Inheritance is a classic way to do this. Our windowing example demonstrates this:

<center>
  <span style="width: 100%;">
    <img src="images/Windows_WindowsFactories.png"></img>
  </span>
</center>

We could add iPhone and Android classes, for example, without changing any existing classes... in principle...

h1. Open-Closed Principle (cont.)

In practice, when you introduce new subclasses, the existing abstractions may not fully support their needs, forcing some changes on the existing types. Hopefully, that's rare.

h1. Open-Closed Principle (cont.)

We'll return to this principle when we talk about _Type Classes_ in functional programming.

h1. Good Object Design: Lesson 5

In long-lived projects, take the time to factor out abstractions so you can exploit the _Open-Closed Principle_. It will minimize the maintenance effort over time.

h1. Strong Dependencies

Last time, we talked at length about encapsulation. We also mentioned that it helps minimize dependencies (coupling) between modules. Some of the principles we just discussed also do this. Let's explore dependencies some more.

<center>
	<img src="images/Module_Dependencies.png"></img>
</center>

Is it bad if @GUI@ depends on @MacWindowFactory@??

h1. @gui.windowing@

:inlinecode lang=scala, class=code-small
package gui.windowing {

  abstract class Window(dimensions: Dimensions) {...}  
  abstract class WindowFactory {
    def make(properties: Properties): Window
  }
  
  protected[gui] package mac {
    MacWindow(...) extends Window(...) {...}
    object MacWindowFactory extends WindowFactory {
      def make(properties: Properties): Window = {...}
    }
  }
  protected[gui] package windows {
    WindowsWindow(...) extends Window(...) {...}
    ...
  }
  ...
}
:endinlinecode 

h1. Other Modules

BAD:
:inlinecode lang=scala, class=code-small
object MyApp {
  def makeNewWindow(properties: Properties) {
    val window = mac.MacWindowFactory.make(properties)
    // Other Mac-specific calls...
  }
}
:endinlinecode 

GOOD:
:inlinecode lang=scala, class=code-small
object MyApp {
  def makeNewWindow(properties: Properties) {
    val window = WindowFactory.make(properties)
    // Other generic calls...
  }
}
:endinlinecode 


h1. Why Are Strong Dependencies Bad?

* *Testing*
* *Maintenance*

h1. Testing

If I want to test a module, I have to set up all its dependencies. That's painful if the dependencies are *concrete* objects like database connections, user interfaces, external processes, etc.

For example, I could only test the "bad" version of @MyApp.makeNewWindow@ with a Macintosh. Also, in general, creating GUI widgets is much slower than avoiding real UI calls.

But if @makeNewWindow@ depends only on abstractions (e.g., Java interfaces), I can use a _stub_ implementation of @WindowFactory@ that makes _unit_ testing easy and fast.

(We'll revisit testing in a few weeks.)

h1. Maintenance

If you have several other teams that depend on the implementation of @MacWindowFactory@, you can't change it without pain:

* You have to plan with those teams when to introduce the changes.
* You and they have to coordinate the changes.
* They have to _unit_ test their changes in isolation.
* The organization has to _integration_ test the changes.
* All the changes need to be deployed in a coordinated manner.

h1. Good Object Design: Lesson 6

Keep dependencies to a minimum.

* Depend only on abstractions.
* Depend on a minimum number of modules.

h1. Inheritance Is A Strong Dependency

It's important to note that _inheritance is a form of strong dependency_. (About the strongest in fact.) The advantages vs. disadvantages need to be weighed.

h1. Inheritance Is A Strong Dependency (cont.)

*Advantages:*
* Reuse of state and behavior.
* Grouping of "logically-similar" things.

*Disadvantages:*
* Any change to parent may require changes to child.
* Proper implementations of @clone@, @equals@, @hashCode@ challenging.
* Can't "abstract over" the dependency.

Like any form of dependency, it should be used _sparingly_.

h1. Composition vs. Inheritance

Compare the following approaches:

:inlinecode lang=scala, class=code-small
abstract class Addressable(
  ..., val city:String, val state:String, val zip:ZipCode)
  
case class Person(name:String, age: Int)
  extends Addressable
:endinlinecode 

Does @Person@ _behave as_ an @Addressable@? What does _that_ mean?

:inlinecode lang=scala, class=code-small
class Address(
  ..., val city:String, val state:String, val zip:ZipCode)
  
case class Person(name:String, age: Int, address: Address)
:endinlinecode 

Makes more sense to say @Person@ _has an_ @Address@.

h1. Composition vs. Inheritance (cont.)

Not only does "@Person@ _has an_ @Address@" make more sense, but now we can treat address as an abstraction. For example, we can pass in the correct kind of address appropriate for the country the person lives.

h1. Less Trivial Example:

:inlinecode lang=scala, class=code-small
package graphics {
  // Abstraction
  trait Rectangle {...}
}
package opengl {
  // Concrete implementation.
  class OGLRectangle(val lowerLeft: Point, val upperRight: Point) 
    extends graphics.Rectangle {...}
}
package gui.windowing.x11 {  
  // Inherits concrete implementation
  class X11Window(properties: Properties) 
    extends opengl.OGLRectangle(...) {...}
}
:endinlinecode 


h1. Versus:

:inlinecode lang=scala, class=code-small
package graphics {
  // Abstraction
  trait Rectangle {...}  
}
package opengl {
  // Concrete implementation.
  class OGLRectangle(val lowerLeft: Point, val upperRight: Point) 
    extends graphics.Rectangle {...}
}
package gui.windowing.x11 {  
  // Uses an object implementing abstraction.
  class X11Window(properties: Properties, rect: Rectangle) {...} 
}
:endinlinecode 

We _compose_ the X11 window with an implementing rectangle.

h1. Composition vs. Inheritance (cont.)

So, dependency on abstractions is the weakest form of dependency. Therefore, we should prefer _composing_ behavior over _inheriting_ it.

*Object Properties:*

Every property is a reference to another object (as long as you consider, numbers, booleans, etc. objects...)

h1. Mixins

An alternative to using _properties_ is to use _mixins_, which are like standalone objects (they have their own _behavior_: state and/or functions), but they are designed to be mixed into other objects using the inheritance mechanism, but with weaker coupling.

Most of the time, these behaviors will be _orthogonal_.

<center>
  <span style="width: 100%;">
    <img src="images/StateSpace.png"></img>
  </span>
</center>

h1. Example: Logging Mixin

:inlinecode lang=scala, class=code-small
package utils {
  trait Logging {
    def error(message: String) = {...}
    def warning(message: String) = {...}
    def info(message: String) = {...}
  }
}

package gui.windowing.x11 {  
  // Make all windows with logging mixed in:
  object X11WindowFactory extends WindowFactory { 
    def make(properties: Properties) = {
      val dimensions = // get dimensions from properties
      new X11Window(dimensions) with utils.Logging
    } // returns window WITH Logging mixed in!
  } 
}
:endinlinecode 


h1. Mixins (cont.)

Other times, the mixin behavior may be closely linked to the class.

Example: How could you model the M:N relationship between windowing toolkits (e.g., Xll, Windows, Aqua, etc.) and the low-level graphics APIs (e.g., OpenGL, DirectX, Quartz, etc.)

h1. Joining GUI and Graphics Libs

:inlinecode lang=scala, class=code-small
package graphics { // for any graphics library...
  trait Rectangle {  // abstraction of rectangle.
    val lowerLeft: Point  // traits don't have constructors,
    val upperRight: Point // ... so we declare "fields" here.
    ...
  }
}
package opengl {  // OpenGL-specific "driver"
  trait OGLRectangle extends graphics.Rectangle {...}
}
package gui.windowing.x11 {  
  // "self type" declaration:
  // X11Window will be composed with a Rectangle...
  abstract class X11Window(properties: Properties) { 
    self: Rectangle =>
    ...
  } 
}
:endinlinecode 

h1. Self Types in Scala

_Self type declarations_, like this:

:inlinecode lang=scala, class=code-small
abstract class X11Window(properties: Properties) { 
  self: Rectangle =>
  ...
}
:endinlinecode 

are "promises" that any _concrete_ class eventually created from @X11Window@ will mix in a @Rectangle@ trait. In byte code, it is identical to @X11Window extends Rectangle@, but avoids the _is a_ trap (Liskov Substitution Principle).

h1. Self Types in Scala

In other words, we could write it this way:

:inlinecode lang=scala, class=code-small
abstract class X11Window(properties: Properties) 
  extends Rectangle { 
  ...
}
:endinlinecode 

However, that would imply that @X11Window@ is _substitutable_ for @Rectangle@ (Liskov), which is a poor inheritance relationship. 

Self types emphasize instead that we will get the "Rectangle" behavior we need through a mixin.

h1. Instantiating the Objects

So, to create actual objects the factory method would do this:

:inlinecode lang=scala, class=code-small
object X11WindowFactory extends WindowFactory { 
 def make(properties: Properties) = {
  val dimensions = // get dimensions from properties
  new X11Window(dimensions) with utils.Logging with OGLRectangle
  {
   val lowerLeft  = // get it from the dimensions
   val upperRight = // get it from the dimensions
  }
 } // returns window WITH Logging WITH OGLRectangle!
} 
:endinlinecode 

Note: this technique is called the "Cake Pattern":http://jonasboner.com/2008/10/06/real-world-scala-dependency-injection-di.html (also discussed "here":http://programming-scala.labs.oreilly.com/ch13.html and used to "implement the Scala compiler itself":http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.63.5834&rep=rep1&type=pdf).

h1. Counterexample: Exception Hierarchies

The Java exception hierarchy (and similar hierarchies in many other languages) is a good use of a deep inheritance hierarchy. 

<center>
	<img src="images/exceptFig1.gif"></img>
</center>

(credit: "http://www.artima.com/designtechniques/exceptions.html":http://www.artima.com/designtechniques/exceptions.html)


h1. Counterexample: Exception Hierarchies

Why? Because this hierarchy forms a _classification tree_, similar to the way that all life on Earth is classified into the _Phylogenetic Tree_.

<center>
	<img src="images/450px-Phylogenetic_tree.png"></img>
</center>

(credit: "http://en.wikipedia.org/wiki/Phylogenetic_tree":http://en.wikipedia.org/wiki/Phylogenetic_tree)

h1. Counterexample: Exception Hierarchies

However, this only works if this hierarchy is very stable.

h1. Good Object Design: Lesson 7

Prefer _composition_ over _inheritance_.

h1. Problems with Objects

Objects offer benefits, but they also pose theoretical and practical problems.

* *Cloning Objects*
* *Determining Equality*
* *Typing of Object-Oriented Code*
* *Unrestrained Mutability*
* *Reusability*

h1. Cloning Objects: Two Strategies

* *Shallow Copy:* Parts are _shared_. References to other "sub-objects" in the new copy point to the same sub-objects in the original object.
+ Faster cloning.
- Changes to sub-objects affect both objects, so state is harder to control.
* *Deep Copy:* Sub-objects are also copied, so the new and old objects are completely independent.
- Expensive cloning.
+ Easier to control state of each object separately.

This is a language (or API) design decision. Needs to be consistently applied!

h1. Cloning Objects (cont.)

Note that the "state problem" goes away if the objects are _immutable_! 

This fact is exploited by _software transactional memory_ implementations (e.g., subtree sharing) that we discussed earlier in the course.

Recall that modifications are implemented by creating new objects where the "invariant" parts are shared. No object is ever modified directly.

h1. Determining Equality

It's actually hard to "write a correct equality operator":http://www.artima.com/lejava/articles/equality.html. Let's talk about Java, as a representative example.

h1. The Signature of @equals@

A common mistake is to get the signature wrong. Suppose I define @equals@ for the @MacWindow@ class we discussed earlier:

:inlinecode lang=scala, class=code-small
boolean equals(MacWindow window) {...}  // WRONG!!
:endinlinecode 

:inlinecode lang=scala, class=code-small
boolean equals(Object other) {...}  // Right!
:endinlinecode 

Why? Because in Java collections, all objects are @Object@, so the run time won't look for the method that takes an @MacWindow@ argument. Rather, it will use the "closest" @equals@ method that takes an @Object@ argument, perhaps the one on @Object@ itself.

h1. Overlooking @hashCode@ 

You have to keep @hashCode@ consistent with @equals@:

_If @equals@ says that two objects are equivalent, then @hashCode@ applied to each object should return the same value._

The default @Object.hashCode@ simply uses the object's reference address. So, if you put an  object in a @HashSet@ for example, then test for its presence using an equal but different object, you _might_ (or not) get a false negative, depending on whether or not the _addresses_ of the two objects both get hashed into the same bucket!

h1. Mutability: @equals@, @hashCode@

This is related to the previous problem with @HashSet@ and similar collections. Suppose you create an object, put it in a @HashSet@, then mutate the object. You _might_ find that the @HashSet@ no longer believes it has the object!

This is because the @HashSet@ uses the value of @hashCode@ to determine the correct bucket for the object. However, if the object is mutable, then the value returned by @hashCode@ changes, so @HashSet@ might start looking in the wrong bucket for the object!

h1. @equals@ Is an _Equivalence Relation_

Your @equals@ must satisfy the following properties:

* *Reflexive:* for any non-null value @x@, the expression @x.equals(x)@ should return true.
* *Symmetric:* for any non-null values @x@ and @y@, @x.equals(y)@ should return true _if and only if_ @y.equals(x)@ returns true.
* *Transitive:* for any non-null values @x@, @y@, and @z@, if @x.equals(y)@ returns true and @y.equals(z)@ returns true, then @x.equals(z)@ should return true.

h1. @equals@ Is an _Equivalence Relation_ (cont.)

* *Consistent:* for any non-null values @x@ and @y@, multiple invocations of @x.equals(y)@ should consistently return true or false, provided no information used in equals comparisons on the objects is modified.
* *Nulls:* For any non-null value @x@, @x.equals(null)@ should return false.

h1. @equals@ Is an _Equivalence Relation_

That doesn't sound hard, but a classic mistake is to allow objects to be considered equal if the values of their _common supertypes are equal_.

:inlinecode lang=scala, class=code-small
// Scala syntax now...
class Point2D(val x: Double, val y: Double) { 
  override def equals(other: Any): Boolean = other match {
      case p: Point2D => x == p.x && y == p.y
      case _ => false
    }
  }}
  
class Point3D(x: Double, y: Double, val z: Double)
    extends Point2D(x, y) { 
  override def equals(other: Any): Boolean = other match {
      case p: Point3D => x == p.x && y == p.y && z == p.z
      case _ => false
    }
  }}
:endinlinecode 

h1. @equals@ Is an _Equivalence Relation_

:inlinecode lang=scala, class=code-small
val p2 = new Point2D(1, 2)
val p3 = new Point3D(1, 2, 3)
p2 == p3   // true
p3 == p2   // false!
:endinlinecode 

Not only is symmetry broken, but this can lead to strange affects in collections, again.

(It also begs the question, is Liskov Substitutability satisfied by 
@Point2D <: Point3D@?)

h1. @equals@ Is an _Equivalence Relation_

You could implement a fix for the symmetry by making the relation @a == b || b == a@, but this breaks transitivity:

:inlinecode lang=scala, class=code-small
val p2 = new Point2D(1, 2)
val p33 = new Point3D(1, 2, 3)
val p34 = new Point3D(1, 2, 4)
p2 == p33   // true
p33 == p2   // true, if we "fix" symmetry (see exercises)

p33 == p2   // true
p2  == p34  // true
p33 == p34  // false!
:endinlinecode 

h1. Equals

So, in most cases, you must also require the objects to be of the _same_ type. However, than can be cases where a subtype doesn't add any more _state_ to the parent type. (We'll see an example later in the lecture.) Objects of these types _could_ be compared.

However, it's still a questionable idea. Perhaps there shouldn't be two different types after all?

See "here":http://www.artima.com/lejava/articles/equality.html for more details on show to implement this case.

h1. Typing of Object-Oriented Languages

Creating a sophisticated and "sound" type system in object-oriented languages is harder than in a comparable functional language, because of subtyping. Java didn't really try very hard. Scala goes quite far, but it takes some effort to master the type system (which is _Turing complete_, by the way). 

Compare Haskell to Scala. Haskell infers most type information, while Scala is limited to _local type inference_, which is why the types of function arguments must be declared.

h1. Type "Invariance" Under Transformations

Another common problem related to subtyping is what I'll call the desire for _type invariance under transformations_. Here's an example to describe what this means.

Suppose you want to map over a Scala @List@. Conveniently, @List@ inherits a @map@ method implementation that is defined in one of its ancestor types, @TraversableLike@.

Here's the problem, I would like the result to also have the type @List@, not @TraversableLike@ or some other lowest-common denominator type. However, I definitely don't want @TraversableLike@ to know about @List@ or another other subtype.

h1. Type "Invariance" Under Transformations

In a lot of strongly-typed object-oriented languages, there is no built-in way to get a new collection with the same type as the original (with the type parameter for the @List@ possibly changed). Scala pre-2.8 also didn't do this. However, Scala 2.8 exploits _implicit parameters_ and special factory objects to do this. 

h1. Type "Invariance" Under Transformations

We want something "equivalent" to this @map@ method signature for @List@:

:inlinecode lang=scala, class=code-small
class List[A] {
  def map [B] (f: (A) ⇒ B): List[B]
  ...
}
:endinlinecode 

Here is the actual signature for @TraversableLike.map@

:inlinecode lang=scala, class=code-small
trait TraversableLike {
  def map [B, That] (f: (A) ⇒ B)(
      implicit bf: CanBuildFrom[Repr, B, That]) : That
  ...
}
:endinlinecode 

h1. Type "Invariance" Under Transformations

Note there are two argument _lists_ and the second one takes a single @implicit@ parameter. Recall that the user doesn't have to specify these parameters if a suitable object is in scope. Here, @CanBuildFrom@ is supplied by the Scala library. It knows how to build a @List[B]@ object (which is what @That@ represents), based on the current "representation" @Repr@ and the type parameter @B@.

h1. Static Types vs. Real-World Variability

It is sometimes said that "objects model the real world". One problem with this view is that real world objects are not always fixed and unchangeable. They can be more fluid, depending on context and changes over time.

However, class-based and especially statically-typed languages don't reflect this fluid nature of reality. Prototype languages and languages with "open types" are more accommodating to this kind of change. 

Yet, as we'll discuss in subsequent lectures, trying to mimic the world too faithfully is overkill for most programming problems.

h1. Unrestrained Mutability

It's a hallmark of OOP that you send messages to objects, which do appropriate computations, possibly modifying internal state, then send a reply to the caller and/or send other messages to other objects.

However, the mutability part presents problems.

h1. Mutability and Correctness

We saw earlier that @hashCode@ and @equals@ are unreliable when objects mutate.

Mutability also makes evaluating _correctness_ (e.g., through testing) more difficult, because if we are testing one thing, we have to also test how it affects mutable objects with which it interacts. 

Furthermore, as we discussed last week, you have to carefully consider the state transitions of an object.

h1. Mutability and Concurrency

However, more than any other reason, the growing need to embrace _concurrency_ to create scalable and reliable applications has made mutability more problematic.

As we discussed in an earlier lecture, all the locking challenges of multi-threaded programming go away when objects are immutable.

h1. Reusability

As OOP went mainstream, a perceived benefit was the ability to create _reusable object libraries_. This largely failed, except in limited cases (such as collections libraries and windowing APIs). 

Why?

h1. Reusability and "Baroque" Abstractions

We'll explore this topic in depth towards the end of the course, but for now, note that objects can expose abstractions with almost no constraints at all. They can take virtually any form, following many different conventions and styles. Paradoxically, this freedom _inhibits_ reuse, because one object library is rarely API-compatible with others.

Also, library designers often do a poor job of _minimizing dependencies_ (coupling), so to use their library requires you to use lots of dependencies you might not want.

(We felt this pain, unfortunately, when setting up the Akka project.)

h1. Conclusions, Part II

Effective OO design exploits principles like the _Open-Closed Principle_ and the _Liskov-Substitution Principle_ to minimize coupling and the impact of changes on clients of the code, etc.

In addition to their benefits, objects present a number of difficulties. Correct implementations of @equals@ and @hashCode@ are hard to write. Mutability causes a number of problems.

h1. Reading Assignments: OOP

* "Real-World Scala: Dependency Injection (DI)":http://jonasboner.com/2008/10/06/real-world-scala-dependency-injection-di.html.
* "How to Write an Equality Method in Java":http://www.artima.com/lejava/articles/equality.html.

h1. Reading Assignments: FP

* "Functional Programming":http://en.wikipedia.org/wiki/Functional_programming (Wikipedia).
* "Functional Programming for the Rest of Us":http://www.defmacro.org/ramblings/fp.html.

h1. Exercise 1: Equality

Implement the "improved" equals methods for @Point2D@ and @Point3D@ that satisfy symmetry. Demonstrate by example that they satisfy symmetry, but still fail to satisfy transitivity.

h1. Exercise 2: Design by Contract

In the Akka project, consider @DataStore.range@ in the @org.chicagoscala.awse.persistence@ package.

Write down all the preconditions, postconditions, and invariants that you can think of that would be reasonable constraints on this method. (Hint: the @DataStoreTest@ checks some, but not all of the possibilities.)

h1. Exercise 3: Select a "Mini-Project" by Next Tuesday

Talk to me over the next week about what you want to do for the mini-project we discussed last week. We need to agree on a project by next Tuesday, November 9.

h1. Appendix: LSP Revisited

Let's return to the Liskov Substitution Principle (LSP) and discuss how it works under inheritance.

Recall this definition from the last lecture:

h1. Liskov Substitution Principle (LSP)

_Let q(x) be a property provable about objects x of type T. Then q(y) should be true for objects y of type S where S is a subtype of T._

<span style="text-align: right; width: 100%">
(The "Liskov Substitution Principle":http://en.wikipedia.org/wiki/Liskov_substitution_principle)
</span>

It's a definition of _subtyping_; If I claim that @S@ is a subtype of @T@, then objects of type @S@ must obey the _contract_ defined for objects of type @T@.

I said _contract_, didn't I? There's a close relationship between LSP and Design by Contract.

h1. How Subclasses Must Behave

First, let's define @Output@ and @LineOrientedOutput@ classes:

:inlinecode lang=scala, class=code-small
class Output(val name: String) {
  def write(chars: Array[Character]) = {...}
  override def toString = "Output(" + name + ")"
}
class LineOrientedOutput(name: String) 
    extends Output(name) {
  def writeln(string: String) = {...}
  override def toString = "LineOrientedOutput(" + name + ")"
}
:endinlinecode 

@LineOrientedOutput@ _specializes_ @Output@ to add support for writing a line at a time.

h1. How Subclass Must Behave (cont.)

Now, consider _function literals_ (a.k.a _anonymous functions_) in Scala, which we'll use in a call to @List.map@:

:inlinecode lang=scala, class=code-small
// Return a list of Output streams.
def toOutputs(list: List[String]): List[Output] =
  list map { s => new Output("out" + s) }

val outputs: List[Output] = toOutputs(List("A", "B"))
// => List(Output(outA), Output(outB))
:endinlinecode 

h1. How Subclass Must Behave (cont.)

For the anonymous function, the scala compiler generates an _anonymous subclass_ of the @Function1[String,Output]@ _trait_:

:inlinecode lang=scala, class=code-small
new Function1[String,Output] {
  def apply(s: String) = new Output("out" + s)
}
:endinlinecode 

Note that the _body_ of the function literal is used to define the @apply@ method, which is abstract in the @Function1[A,B]@ trait.

h1. How Subclass Must Behave (cont.)

Let's extract the anonymous function into a @val@ and pass it to @toOutputs@:

:inlinecode lang=scala, class=code-small
val s2o: (String => Output) = s => new Output("out" + s)

def toOutputs(
     list: List[String], f: String=>Output): List[Output] =
  list map f

val outputs: List[Output] = toOutputs(List("A", "B"), s2o)
// => List(Output(outA), Output(outB))
:endinlinecode 

Is there a _subclass_ of @String => Output@? If so, how should it behave?

h1. Function1 Subtypes

Recall that the type is actually @Function1[-A,+R]@, where @A@ is the type of the single argument and @R@ is the type of the return value. Recall also from the last lecture that the @+R@ means the return type behaves _covariantly_ under inheritance, while @-A@ means that the argument behaves _contravariantly_ under inheritance. Let's understand what this really means.

h1. Covariant and Contravariant Behaviors

If I have a parameterized type @X[+A]@, it means that @X[String]@ is a _subtype_ of @X[AnyRef]@, since @String@ is a _subtype_ of @AnyRef@. This is _covariant_ behavior.

However, if I have a parameterized type @Y[-A]@, it means that @Y[String]@ is a _super type_ of @Y[AnyRef]@, since @String@ is a _subtype_ of @AnyRef@. This is _contravariant_ behavior.

The contravariant behavior is harder to grasp. Keep in mind that we are _always_ discussing inheritance in the context of the _Liskov Substitution Principle_. Inheritance only has meaning in the sense that I can _substitute_ an object of one type for an object of another type (i.e. a "parent" type).

h1. Covariant and Contravariant Behaviors (cont.)

So, what does this mean for @Function1[-A,+R]@? First consider the @+R@ for the return value, which behaves _covariantly_. In our example, we defined a function this way:

:inlinecode lang=scala, class=code-small
val s2o: (String => Output) = s => new Output("out" + s)
:endinlinecode 

Suppose we define a new function that returns @LineOrientedOutput@:

:inlinecode lang=scala, class=code-small
val s2loo: (String => LineOrientedOutput) = 
  s => new LineOrientedOutput("out" + s)

def toOutputs ... // same

val outputs: List[Output] = toOutputs(List("A", "B"), s2loo)
// returns: List[Output] = List(LineOrientedOutput(outA), LineOrientedOutput(outB))
:endinlinecode 

This works fine!

h1. Covariant Behavior of Return Values

@s2loo@ _always_ returns a @LineOrientedOutput@. That's fine, because the clients that use @toOutputs@ expect a @List[Output]@ and @List[LineOrientedOutput]@ is a subtype.

This is why return values must be _covariant_.

So, @s2loo@ of type @Function[String,LineOrientedOutput]@ is a _subtype_ of @Function1[String,Output]@, since @LineOrientedOutput@ is a _subtype_ of @Output@.

h1. Contravariant Behavior of Arguments

Now consider what we can do with the arguments, which behave _contravariantly_, since @Function1@ is declared @Function1[-A,+R]@.

:inlinecode lang=scala, class=code-small
val a2o: (Any => Output) = 
  s => new Output("out" + s.toString)

def toOutputs ... // same

val outputs: List[Output] = toOutputs(List("A", "B"), a2o)
// returns: List[Output] = List(LineOrientedOutput(outA), LineOrientedOutput(outB))
:endinlinecode 

This also works!

h1. Contravariant Behavior of Arguments

Why does it work? @toOutputs@ only accepts a @List[String]@ as the first argument. Each string will be passed to the 2nd argument, the transformation function which creates an @Output@. In this case, @a2o@ is that function. It can handle @Any@ object, so it can easily handle strings. Hence, no breakage.

So, @a2o@ of type @Function[Any,Output]@ is also a _subtype_ of @Function1[String,Output]@, even though @Any@ is a _supertype_ of @String@.

h1. LSP and Design by Contract

Remember that we're describing the way that @Function1.apply@ behaves under inheritance. 

LSP says that we can substitute an object if it _broadens_ the allowed input values its methods can handle, because clients will still only pass the subset of values the _preconditions_ say are acceptable. Hence, the precondition contract is preserved.

Similarly, an object is substitutable if its methods return a _narrower_ set of values, because that set will always be within a broader set the client expects, as defined by the _postconditions_.

That's how LSP and Design by Contract are related.

